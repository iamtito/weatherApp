###################################################################################################
##
## This ansible deployments follows a dynamiv inventory paradym
## $(which ansible-playbook) ansible/roles/jobs/tasks/ldap-server.yml -i ansible/ec2.py -l "tag_App_ldap" -f 5 -u ubuntu
##
## Assuming the name of the instance have the tag App=ssh, wihtout maintaining a host list, we can dynamically target and deploy the ssh keys to those instance
## In this deployment we are taking advantage of the ldap ami in aws market, and deploying it
##
## This can be setup and maintained using terraform aswell as terraform maintains the state of the infrastructure
###################################################################################################
- name: Create LDAP Server
  hosts: all
  vars:
    - ldap_image: ami-0919c7e7b966c2acf 
    - ec2_access_key: "{{ ec2_access_key }}"
    - ec2_secret_key: "{{ ec2_secret_key }}"
    - region: "us-east-1"
    - sec_group: "LDAP_SG"
    - key_name: "bees-tito-profile"
    ##### Secrets can also be parsed from AWS Secretmanager
    ###### Setting Secrets directly from the aws secret manager ######
    # - get_aws_creds: "{{ lookup('aws_secret', '/aws_secrets') }}"
    # - ec2_access_key: "{{ get_aws_creds['AWS_ACCESS_KEY_ID'] }}"
    # - ec2_secret_key: "{{ get_aws_creds['AWS_SECRET_ACCESS_KEY'] }}"

  tasks:
    ##################################################################
    ##### Below should be uncommented if you want to create a public #
    ##################################################################
    # - name: Upload public key
    #   delegate_to: localhost
    #   ec2_key:
    #     name: "{{ key_name }}"
    #     key_material: "{{ lookup('file', '/Users/tito/.ssh/{{ key_name }}.pub') }}"
    #     region: "{{ region }}"
    #     aws_access_key: "{{ec2_access_key}}"
    #     aws_secret_key: "{{ec2_secret_key}}"


    ## For internal usage, the ports should be locked to specific IP
    ## We are opening it up by setting cidr_ip to 0.0.0.0/0 for test purposes
    - name: Create security group
      delegate_to: localhost
      ec2_group:
        name: "{{ sec_group }}"
        tags:
          Name: "{{ sec_group }}"
        description: "Sec group for app "
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key: "{{ ec2_secret_key }}"
        rules:
          - proto: tcp
            from_port: 3389
            to_port: 3389
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on ssh port
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on ssh port
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on ssh port
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: result_sec_group
    - debug: var=result_sec_group

    - name: Provision LDAP Instance
      delegate_to: localhost
      ec2:
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        key_name: "{{ key_name }}" # I already have the key in my aws account
        group_id: "{{ result_sec_group.group_id }}"
        image: "{{ ldap_image }}"
        instance_type: t2.micro
        region: "{{ region }}"
        instance_tags:
          Name: LDAP Server
          Env: Production
        wait: true
        count: 1
      register: ldap_instance
    - debug: var=ldap_instance